#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RL —Å—Ä–µ–¥—ã —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from environment.trading_env import TradingEnvironment

def create_sample_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("–°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    # –°–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ OHLCV
    dates = pd.date_range(start='2024-01-01', end='2024-01-31', freq='1H')
    n_days = len(dates)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    base_price = 50000  # BTC —Ü–µ–Ω–∞
    volatility = 0.02   # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã
    np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    
    returns = np.random.normal(0, volatility, n_days)
    prices = base_price * np.exp(np.cumsum(returns))
    
    # –°–æ–∑–¥–∞—ë–º OHLCV
    data = []
    for i in range(len(dates)):
        date = dates[i]
        price = prices[i]
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ OHLC
        high = price * (1 + abs(np.random.normal(0, 0.01)))
        low = price * (1 - abs(np.random.normal(0, 0.01)))
        open_price = price * (1 + np.random.normal(0, 0.005))
        close_price = price * (1 + np.random.normal(0, 0.005))
        
        # –û–±—ä—ë–º
        volume = np.random.uniform(100, 1000)
        
        data.append({
            'timestamp': date,
            'open': open_price,
            'high': high,
            'low': low,
            'close': close_price,
            'volume': volume
        })
    
    df = pd.DataFrame(data)
    df = df.set_index('timestamp')
    
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {df['close'].min():.2f} - {df['close'].max():.2f}")
    
    return df

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RL –°–†–ï–î–´ ===")
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = create_sample_data()
    
    # –°–æ–∑–¥–∞—ë–º —Å—Ä–µ–¥—É
    env = TradingEnvironment(
        data=data,
        window_size=24,  # 24 —á–∞—Å–∞
        commission_rate=0.0004,
        slippage_rate=0.0001,
        initial_balance=10000.0,
        max_position_size=0.1
    )
    
    print(f"–†–∞–∑–º–µ—Ä –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {env.observation_space.shape}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: {env.action_space.n}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {env.max_steps}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ø–∏–∑–æ–¥–æ–≤
    n_episodes = 3
    
    for episode in range(n_episodes):
        print(f"\n--- –≠–ø–∏–∑–æ–¥ {episode + 1} ---")
        
        obs, info = env.reset()
        print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {obs.shape}")
        print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info['balance']:.2f}")
        
        total_reward = 0
        step = 0
        
        while step < 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
            # –°–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            action = env.action_space.sample()
            
            obs, reward, done, truncated, info = env.step(action)
            total_reward += reward
            step += 1
            
            if step % 20 == 0:
                print(f"–®–∞–≥ {step}: –î–µ–π—Å—Ç–≤–∏–µ={action}, –ù–∞–≥—Ä–∞–¥–∞={reward:.6f}, –ë–∞–ª–∞–Ω—Å={info['balance']:.2f}")
            
            if done:
                break
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = env.get_statistics()
        print(f"–≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {step} —à–∞–≥–æ–≤")
        print(f"–û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {total_reward:.6f}")
        print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info['balance']:.2f}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {info['trades_count']}")
        
        if stats:
            print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")

def test_simple_strategy():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–û–ô –°–¢–†–ê–¢–ï–ì–ò–ò ===")
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = create_sample_data()
    
    # –°–æ–∑–¥–∞—ë–º —Å—Ä–µ–¥—É
    env = TradingEnvironment(
        data=data,
        window_size=24,
        commission_rate=0.0004,
        slippage_rate=0.0001,
        initial_balance=10000.0,
        max_position_size=0.1
    )
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–∫—É–ø–∞–µ–º –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏, –ø—Ä–æ–¥–∞—ë–º –ø—Ä–∏ —Ä–æ—Å—Ç–µ
    obs, info = env.reset()
    step = 0
    
    while step < 200:  # 200 —à–∞–≥–æ–≤
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = env.data.iloc[env.current_step - 1]['close'] if env.current_step > 0 else env.data.iloc[0]['close']
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ 1%, –ø–æ–∫—É–ø–∞–µ–º
        if step > 0:
            prev_price = env.data.iloc[step - 1]['close']
            price_change = (current_price - prev_price) / prev_price
            
            if price_change < -0.01:  # –ü–∞–¥–µ–Ω–∏–µ –Ω–∞ 1%
                action = 1  # BUY
            elif price_change > 0.01:  # –†–æ—Å—Ç –Ω–∞ 1%
                action = 2  # SELL
            else:
                action = 0  # HOLD
        else:
            action = 0  # HOLD
        
        obs, reward, done, truncated, info = env.step(action)
        step += 1
        
        if step % 50 == 0:
            print(f"–®–∞–≥ {step}: –¶–µ–Ω–∞={current_price:.2f}, –î–µ–π—Å—Ç–≤–∏–µ={action}, –ë–∞–ª–∞–Ω—Å={info['balance']:.2f}")
        
        if done:
            break
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = env.get_statistics()
    print(f"\n–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–ë–∞–ª–∞–Ω—Å: {info['balance']:.2f}")
    print(f"–û–±—â–∏–π PnL: {info['total_pnl']:.2f}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {info['trades_count']}")
    
    if stats:
        print(f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats.get('total_return', 0):.4f}")
        print(f"Win Rate: {stats.get('win_rate', 0):.2f}")

if __name__ == "__main__":
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò-—Ç—Ä–µ–π–¥–∏–Ω–≥ —Å—Ä–µ–¥—ã")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥—É
        test_environment()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        test_simple_strategy()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()
