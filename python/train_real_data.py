#!/usr/bin/env python3
"""
–û–±—É—á–µ–Ω–∏–µ RL –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö BTC/USDT
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from environment.trading_env import TradingEnvironment
from models.trainer import TradingModelTrainer

def load_real_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BTC/USDT...")
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    data_file = "data/BTCUSDT_1h_2020-01-01_2024-12-31.csv"
    
    if not os.path.exists(data_file):
        print(f"‚ùå –§–∞–π–ª {data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ download_data.py")
        return None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv(data_file, index_col='timestamp', parse_dates=True)
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df.index.min()} - {df.index.max()}")
    print(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {df['close'].min():.2f} - {df['close'].max():.2f}")
    
    return df

def prepare_environment(data):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ä–µ–¥—É"""
    print("\nüéÆ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ä–µ–¥—É...")
    
    # –°–æ–∑–¥–∞—ë–º —Å—Ä–µ–¥—É
    env = TradingEnvironment(
        data=data,
        window_size=64,  # 64 —á–∞—Å–∞ = ~2.7 –¥–Ω—è
        commission_rate=0.0004,  # 0.04% –∫–æ–º–∏—Å—Å–∏—è Binance
        slippage_rate=0.0001,    # 0.01% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        initial_balance=10000.0,  # $10,000 –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
        max_position_size=0.1     # –ú–∞–∫—Å–∏–º—É–º 10% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
    )
    
    print(f"‚úÖ –°—Ä–µ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞:")
    print(f"   - –†–∞–∑–º–µ—Ä –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {env.observation_space.shape}")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: {env.action_space.n}")
    print(f"   - –ú–∞–∫—Å–∏–º—É–º —à–∞–≥–æ–≤: {env.max_steps}")
    
    return env

def test_environment(env, n_episodes=3):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥—É –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥—É –Ω–∞ {n_episodes} —ç–ø–∏–∑–æ–¥–∞—Ö...")
    
    for episode in range(n_episodes):
        print(f"\n--- –≠–ø–∏–∑–æ–¥ {episode + 1} ---")
        
        obs, info = env.reset()
        total_reward = 0
        step = 0
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        max_steps = min(100, env.max_steps)
        
        while step < max_steps:
            # –°–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            action = env.action_space.sample()
            
            obs, reward, done, truncated, info = env.step(action)
            total_reward += reward
            step += 1
            
            if step % 25 == 0:
                print(f"   –®–∞–≥ {step}: –î–µ–π—Å—Ç–≤–∏–µ={action}, –ù–∞–≥—Ä–∞–¥–∞={reward:.6f}, –ë–∞–ª–∞–Ω—Å={info['balance']:.2f}")
            
            if done:
                break
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ø–∏–∑–æ–¥–∞
        stats = env.get_statistics()
        print(f"   –≠–ø–∏–∑–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {step} —à–∞–≥–æ–≤")
        print(f"   –û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {total_reward:.6f}")
        print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info['balance']:.2f}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {info['trades_count']}")
        
        if stats:
            print(f"   Win Rate: {stats.get('win_rate', 0):.2f}")
            print(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats.get('total_return', 0):.4f}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –û–±—É—á–µ–Ω–∏–µ RL –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö BTC/USDT")
    print("=" * 60)
    
    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = load_real_data()
        if data is None:
            return
        
        # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–µ–¥—É
        env = prepare_environment(data)
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥—É
        test_environment(env, n_episodes=2)
        
        print("\n" + "=" * 60)
        print("üéØ –°—Ä–µ–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—É—á–µ–Ω–∏—é!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Stable-Baselines3: pip install stable-baselines3")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ: python src/models/trainer.py")
        print("3. –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ")
        
        # 4. –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å (–±–µ–∑ Stable-Baselines3)
        print("\nüöÄ –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å...")
        create_simple_model(env)
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def create_simple_model(env):
    """–°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –±–µ–∑ Stable-Baselines3"""
    print("üß† –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª...")
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–∫—É–ø–∞–µ–º –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏, –ø—Ä–æ–¥–∞—ë–º –ø—Ä–∏ —Ä–æ—Å—Ç–µ
    def simple_strategy(observation):
        """–ü—Ä–æ—Å—Ç–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        # observation —Å–æ–¥–µ—Ä–∂–∏—Ç: [OHLCV –∑–∞ 64 —á–∞—Å–∞ + –ø–æ–∑–∏—Ü–∏—è + –±–∞–ª–∞–Ω—Å]
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–∞–¥–∞—é—Ç -> –ø–æ–∫—É–ø–∞–µ–º
        # –ï—Å–ª–∏ —Ä–∞—Å—Ç—É—Ç -> –ø—Ä–æ–¥–∞—ë–º
        
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        import random
        return random.choice([0, 1, 2])  # HOLD, BUY, SELL
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...")
    
    obs, info = env.reset()
    total_reward = 0
    step = 0
    
    while step < 200:  # 200 —à–∞–≥–æ–≤
        action = simple_strategy(obs)
        obs, reward, done, truncated, info = env.step(action)
        total_reward += reward
        step += 1
        
        if step % 50 == 0:
            print(f"   –®–∞–≥ {step}: –î–µ–π—Å—Ç–≤–∏–µ={action}, –ë–∞–ª–∞–Ω—Å={info['balance']:.2f}")
        
        if done:
            break
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = env.get_statistics()
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
    print(f"   –ë–∞–ª–∞–Ω—Å: {info['balance']:.2f}")
    print(f"   –û–±—â–∏–π PnL: {info['total_pnl']:.2f}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {info['trades_count']}")
    
    if stats:
        print(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats.get('total_return', 0):.4f}")
        print(f"   Win Rate: {stats.get('win_rate', 0):.2f}")
        print(f"   Sharpe Ratio: {stats.get('sharpe_ratio', 0):.4f}")
    
    print("\n‚úÖ –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")

if __name__ == "__main__":
    main()
