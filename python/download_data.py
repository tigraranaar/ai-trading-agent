#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance (–±–µ–∑ API –∫–ª—é—á–µ–π)
–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
"""

import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import os

def download_binance_data(symbol='BTCUSDT', interval='1h', start_date='2020-01-01', end_date='2024-12-31'):
    """
    –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
        interval: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ('1m', '5m', '15m', '1h', '4h', '1d')
        start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
    """
    
    print(f"üìä –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —Å {start_date} –ø–æ {end_date}")
    print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval}")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ timestamp
    start_ts = int(datetime.strptime(start_date, '%Y-%m-%d').timestamp() * 1000)
    end_ts = int(datetime.strptime(end_date, '%Y-%m-%d').timestamp() * 1000)
    
    # URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API Binance
    base_url = "https://api.binance.com/api/v3/klines"
    
    all_data = []
    current_ts = start_ts
    
    # Binance API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 1000 —Å–≤–µ—á–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å
    limit = 1000
    
    while current_ts < end_ts:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            'symbol': symbol,
            'interval': interval,
            'startTime': current_ts,
            'limit': limit
        }
        
        try:
            print(f"‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å {datetime.fromtimestamp(current_ts/1000)}...")
            
            response = requests.get(base_url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if not data:
                print("üì≠ –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
                break
            
            all_data.extend(data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            current_ts = data[-1][0] + 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API)
            time.sleep(0.1)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π")
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break
    
    if not all_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return None
    
    print(f"üéâ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_data)} —Å–≤–µ—á–µ–π")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    df = pd.DataFrame(all_data, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_asset_volume', 'number_of_trades',
        'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
    ])
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df = df.set_index('timestamp')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
    numeric_columns = ['open', 'high', 'low', 'close', 'volume']
    for col in numeric_columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
    df = df[(df.index >= pd.to_datetime(start_date)) & 
            (df.index <= pd.to_datetime(end_date))]
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ OHLCV
    df = df[['open', 'high', 'low', 'close', 'volume']]
    
    print(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {df['close'].min():.2f} - {df['close'].max():.2f}")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df.index.min()} - {df.index.max()}")
    
    return df

def save_data(df, symbol='BTCUSDT', interval='1h', start_date='2020-01-01', end_date='2024-12-31'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –ò–º—è —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ CSV)
    csv_filename = f"data/{symbol}_{interval}_{start_date}_{end_date}.csv"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    df.to_csv(csv_filename)
    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {csv_filename}")
    
    return csv_filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö Binance")
    print("=" * 50)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    symbol = 'BTCUSDT'
    interval = '1h'  # 1 —á–∞—Å - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —Ä–∞–∑–º–µ—Ä–æ–º
    start_date = '2020-01-01'
    end_date = '2024-12-31'
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = download_binance_data(symbol, interval, start_date, end_date)
        
        if df is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            save_data(df, symbol, interval, start_date, end_date)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {len(df)}")
            print(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['close'].mean():.2f}")
            print(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {df['close'].pct_change().std():.4f}")
            print(f"–°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: {df['volume'].mean():.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            print("\nüìà –ü–µ—Ä–≤—ã–µ 5 —Å–≤–µ—á–µ–π:")
            print(df.head())
            
            print("\nüìâ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π:")
            print(df.tail())
            
            print("\n‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
