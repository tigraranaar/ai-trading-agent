/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const { Pool } = require('pg');
const config = require('./config');
const logger = require('./logger');

class Database {
  constructor() {
    this.pool = null;
    this.isConnected = false;
    this.mockMode = process.env.MOCK_DATABASE === 'true' || !process.env.DB_HOST;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async connect() {
    if (this.mockMode) {
      logger.warn('üîÑ –†–µ–∂–∏–º –∑–∞–≥–ª—É—à–∫–∏: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
      this.isConnected = true;
      return;
    }

    try {
      this.pool = new Pool({
        host: config.database.host,
        port: config.database.port,
        database: config.database.name,
        user: config.database.user,
        password: config.database.password,
        ssl: config.database.ssl,
        max: 20, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        idleTimeoutMillis: 30000,
        connectionTimeoutMillis: 2000,
      });

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const client = await this.pool.connect();
      await client.query('SELECT NOW()');
      client.release();

      this.isConnected = true;
      logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      await this.initializeTables();
      
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async disconnect() {
    if (this.pool) {
      await this.pool.end();
      this.isConnected = false;
      logger.info('üõë –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç PostgreSQL');
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
   */
  async initializeTables() {
    if (this.mockMode) return;

    try {
      const createTablesQuery = `
        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–¥–µ–ª–æ–∫
        CREATE TABLE IF NOT EXISTS trades (
          id SERIAL PRIMARY KEY,
          symbol VARCHAR(20) NOT NULL,
          side VARCHAR(10) NOT NULL,
          quantity DECIMAL(20, 8) NOT NULL,
          price DECIMAL(20, 8) NOT NULL,
          timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          order_id VARCHAR(100),
          status VARCHAR(20) DEFAULT 'OPEN',
          pnl DECIMAL(20, 8) DEFAULT 0,
          commission DECIMAL(20, 8) DEFAULT 0,
          model_prediction JSONB,
          risk_metrics JSONB
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
        CREATE TABLE IF NOT EXISTS positions (
          id SERIAL PRIMARY KEY,
          symbol VARCHAR(20) NOT NULL,
          side VARCHAR(10) NOT NULL,
          quantity DECIMAL(20, 8) NOT NULL,
          entry_price DECIMAL(20, 8) NOT NULL,
          current_price DECIMAL(20, 8),
          pnl DECIMAL(20, 8) DEFAULT 0,
          timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          status VARCHAR(20) DEFAULT 'OPEN'
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        CREATE TABLE IF NOT EXISTS performance_metrics (
          id SERIAL PRIMARY KEY,
          timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          total_pnl DECIMAL(20, 8) DEFAULT 0,
          win_rate DECIMAL(5, 4) DEFAULT 0,
          sharpe_ratio DECIMAL(10, 6) DEFAULT 0,
          max_drawdown DECIMAL(10, 6) DEFAULT 0,
          total_trades INTEGER DEFAULT 0,
          profitable_trades INTEGER DEFAULT 0
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
        CREATE TABLE IF NOT EXISTS bot_config (
          id SERIAL PRIMARY KEY,
          key VARCHAR(100) UNIQUE NOT NULL,
          value TEXT NOT NULL,
          description TEXT,
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ª–æ–≥–æ–≤
        CREATE TABLE IF NOT EXISTS bot_logs (
          id SERIAL PRIMARY KEY,
          timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          level VARCHAR(10) NOT NULL,
          message TEXT NOT NULL,
          context JSONB
        );
      `;

      await this.pool.query(createTablesQuery);
      logger.info('‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

      // –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      await this.insertDefaultConfig();
      
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü:', error);
      throw error;
    }
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  async insertDefaultConfig() {
    if (this.mockMode) return;

    try {
      const defaultConfig = [
        ['max_risk_per_trade', '0.02', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (2%)'],
        ['daily_stop_loss', '0.05', '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–æ–≤ (5%)'],
        ['trading_pairs', 'BTCUSDT,ETHUSDT', '–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã'],
        ['model_path', '../python/models/trading_model_ppo_latest', '–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏'],
        ['prediction_interval', '60000', '–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö']
      ];

      for (const [key, value, description] of defaultConfig) {
        await this.pool.query(`
          INSERT INTO bot_config (key, value, description) 
          VALUES ($1, $2, $3) 
          ON CONFLICT (key) DO NOTHING
        `, [key, value, description]);
      }

      logger.info('‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å—Ç–∞–≤–ª–µ–Ω–∞');
      
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
   */
  async query(text, params = []) {
    if (this.mockMode) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      return this.mockQuery(text, params);
    }

    if (!this.isConnected) {
      throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    try {
      const result = await this.pool.query(text, params);
      return result;
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  mockQuery(text, params) {
    logger.debug('üîÑ Mock query:', text, params);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    return new Promise(resolve => {
      setTimeout(() => {
        if (text.includes('performance_metrics')) {
          resolve({
            rows: [{
              total_pnl: 0.0,
              win_rate: 0.0,
              sharpe_ratio: 0.0,
              max_drawdown: 0.0,
              total_trades: 0,
              profitable_trades: 0
            }]
          });
        } else if (text.includes('positions')) {
          resolve({
            rows: [{ open_positions: 0 }]
          });
        } else if (text.includes('trades')) {
          resolve({
            rows: [{ today_trades: 0 }]
          });
        } else if (text.includes('bot_config')) {
          resolve({
            rows: [
              { key: 'model_path', value: '../python/models/trading_model_ppo_latest' },
              { key: 'trading_pairs', value: 'BTCUSDT,ETHUSDT' }
            ]
          });
        } else {
          resolve({ rows: [] });
        }
      }, 10);
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
   */
  async getClient() {
    if (this.mockMode) {
      throw new Error('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏');
    }

    if (!this.isConnected) {
      throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    return await this.pool.connect();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async healthCheck() {
    if (this.mockMode) {
      return {
        status: 'mock',
        timestamp: new Date().toISOString(),
        connection: true,
        message: '–†–µ–∂–∏–º –∑–∞–≥–ª—É—à–∫–∏ - —Ä–µ–∞–ª—å–Ω–∞—è –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'
      };
    }

    try {
      const result = await this.query('SELECT NOW() as current_time');
      return {
        status: 'healthy',
        timestamp: result.rows[0].current_time,
        connection: this.isConnected
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        error: error.message,
        connection: this.isConnected
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new Database();
