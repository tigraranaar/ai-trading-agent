#!/usr/bin/env node
/**
 * ü§ñ –ò–ò-–¢—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç - –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç Python RL –º–æ–¥–µ–ª—å —Å Node.js —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
 */

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const path = require('path');
require('dotenv').config();

const config = require('./utils/config');
const logger = require('./utils/logger');
const database = require('./utils/database');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
const PORT = config.server.port;

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined', { stream: { write: message => logger.info(message.trim()) } }));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, '../public')));

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/v1', require('./api/routes'));

// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>ü§ñ –ò–ò-–¢—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç</title>
      <meta charset="utf-8">
      <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; text-align: center; }
        .status { padding: 15px; margin: 20px 0; border-radius: 5px; }
        .status.running { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .status.stopped { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .endpoints { background: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .endpoint { margin: 10px 0; padding: 10px; background: white; border-left: 4px solid #007bff; }
        .method { font-weight: bold; color: #007bff; }
        .url { font-family: monospace; background: #e9ecef; padding: 2px 6px; border-radius: 3px; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>ü§ñ –ò–ò-–¢—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç</h1>
        
        <div class="status running">
          ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}
        </div>
        
        <h2>üì° API Endpoints</h2>
        <div class="endpoints">
          <div class="endpoint">
            <span class="method">GET</span> <span class="url">/api/v1/status</span> - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
          </div>
          <div class="endpoint">
            <span class="method">GET</span> <span class="url">/api/v1/positions</span> - –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
          </div>
          <div class="endpoint">
            <span class="method">GET</span> <span class="url">/api/v1/trades</span> - –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
          </div>
          <div class="endpoint">
            <span class="method">GET</span> <span class="url">/api/v1/performance</span> - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
          </div>
          <div class="endpoint">
            <span class="method">POST</span> <span class="url">/api/v1/control/start</span> - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
          </div>
          <div class="endpoint">
            <span class="method">POST</span> <span class="url">/api/v1/control/stop</span> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
          </div>
        </div>
        
        <h2>üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h2>
        <ul>
          <li><strong>Python:</strong> Reinforcement Learning (PPO –º–æ–¥–µ–ª—å)</li>
          <li><strong>Node.js:</strong> –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏ API</li>
          <li><strong>PostgreSQL:</strong> –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</li>
          <li><strong>Binance:</strong> –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞</li>
        </ul>
        
        <p style="text-align: center; color: #6c757d; margin-top: 30px;">
          üöÄ –°–∞–º–æ–æ–±—É—á–∞—é—â–∏–π—Å—è –ò–ò-—Ç—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ RL
        </p>
      </div>
    </body>
    </html>
  `);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  logger.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  res.status(500).json({ 
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: process.env.NODE_ENV === 'development' ? err.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
  });
});

// 404 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('*', (req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await database.connect();
    logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      logger.info(`üöÄ –ò–ò-–¢—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      logger.info(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
    });
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
  logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await database.disconnect();
  process.exit(0);
});

process.on('SIGINT', async () => {
  logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  await database.disconnect();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();




