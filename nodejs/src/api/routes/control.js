/**
 * API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
 */

const express = require('express');
const router = express.Router();
const TradingBot = require('../../bot/trading_bot');

// –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
const tradingBot = new TradingBot();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞
tradingBot.on('botStarted', () => {
  console.log('üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ API');
});

tradingBot.on('botStopped', () => {
  console.log('üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API');
});

tradingBot.on('botEmergencyStopped', () => {
  console.log('üö® –ë–æ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API');
});

tradingBot.on('tradeExecuted', (trade) => {
  console.log('üìä –°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', trade.symbol, trade.side);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
router.post('/start', async (req, res) => {
  try {
    const success = await tradingBot.start();
    
    if (success) {
      // –í–∫–ª—é—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
      tradingBot.isTrading = true;
      
      res.json({
        message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
        status: 'running',
        timestamp: new Date().toISOString(),
        botStatus: tradingBot.getStatus()
      });
    } else {
      res.status(400).json({
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
        message: '–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      });
    }
    
  } catch (error) {
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞',
      message: error.message
    });
  }
});

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
router.post('/stop', async (req, res) => {
  try {
    const success = await tradingBot.stop();
    
    if (success) {
      res.json({
        message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        status: 'stopped',
        timestamp: new Date().toISOString(),
        botStatus: tradingBot.getStatus()
      });
    } else {
      res.status(400).json({
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞',
        message: '–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      });
    }
    
  } catch (error) {
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞',
      message: error.message
    });
  }
});

// –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
router.post('/emergency-stop', async (req, res) => {
  try {
    await tradingBot.emergencyStop();
    
    res.json({
      message: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
      status: 'emergency_stopped',
      timestamp: new Date().toISOString(),
      botStatus: tradingBot.getStatus()
    });
    
  } catch (error) {
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏',
      message: error.message
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
router.get('/status', (req, res) => {
  try {
    const status = tradingBot.getStatus();
    
    res.json({
      status: 'success',
      botStatus: status,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
      message: error.message
    });
  }
});

// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
router.post('/trading', (req, res) => {
  try {
    const { enabled } = req.body;
    
    if (typeof enabled !== 'boolean') {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä',
        message: '–ü–∞—Ä–∞–º–µ—Ç—Ä "enabled" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean'
      });
    }
    
    tradingBot.isTrading = enabled;
    
    res.json({
      message: `–¢–æ—Ä–≥–æ–≤–ª—è ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`,
      trading: enabled,
      timestamp: new Date().toISOString(),
      botStatus: tradingBot.getStatus()
    });
    
  } catch (error) {
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏',
      message: error.message
    });
  }
});

module.exports = router;
